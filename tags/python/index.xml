<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Dominic Buehler</title><link>https://d0m1987.github.io/blog/tags/python/</link><description>Recent content in python on Dominic Buehler</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright ¬© 2008‚Äì2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 09 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://d0m1987.github.io/blog/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Unwrangling list comprehensions ü§ì‚òùÔ∏è</title><link>https://d0m1987.github.io/blog/post/60_second_gists/python_unwrangling_list_comprehensions/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate><guid>https://d0m1987.github.io/blog/post/60_second_gists/python_unwrangling_list_comprehensions/</guid><description>
If you're having problems understanding (nested) python list comprehensions like I had at the beginning, don't worry anymore! The following explanation really helped me to understand how comprehensions and for-loops are linked.
Just make yourself aware that the following for-loop ...
1items_level_1 = [1,2,3] 2for item_level_1 in items_level_1: 3print(item_level_1) ... is equivalent to this list comprehension
1[print(item_level_1) for item_level_1 in items_level_1] So the main thing that changes is that print(item_level_1) is standing in the beginning instead of being at the end of the for-loop.</description></item></channel></rss>