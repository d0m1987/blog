[{"body":"","link":"https://d0m1987.github.io/blog/","section":"","tags":null,"title":""},{"body":"","link":"https://d0m1987.github.io/blog/series/60-second-gists/","section":"series","tags":null,"title":"60 second gists"},{"body":"","link":"https://d0m1987.github.io/blog/post/60_second_gists/","section":"post","tags":null,"title":"60 second gists"},{"body":"Key Combiner - your one stop shop for learning keyboard shortcuts I recently found Key Combiner and I just need to say: \u0026quot;Wow, what a great tool if you want to learn keyboard shortcuts!\u0026quot;\nThe goal of Key Combiner is to help you to find and also learn keyboard shortcuts.\nThere are two \u0026quot;levels\u0026quot; you can use Key Combiner.\nLevel 1: Using the homepage The homepage is great source of information. Just go to the public collections and search for the application that you want to learn more about. The collection is very rich, reaching from IDEs over browsers until online services like Gmail or Trello.\nLevel 2: Using the Key Combiner tool for your OS Key Combiner becomes even more powerful when you are using the Key Combiner tool you can download for your respective OS.\nWith this tool installed, you can access Key Combiner information with ease and it detects automatically your context. What do I mean by context? Let's assume I'm working in VS Code and press Option + Command + C. This opens the Key Combiner tool and shows me the keyboard shortcuts for my current context, here VS Code.\n    As you can see, a nice overlay opens up and you can search for the shortcut you need. Pretty handy, right? üòÅ\n","link":"https://d0m1987.github.io/blog/post/60_second_gists/key_combiner/","section":"post","tags":["tools"],"title":"Key Combiner - No need for your mouse anymore ‚ùåüñ±Ô∏è"},{"body":"","link":"https://d0m1987.github.io/blog/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://d0m1987.github.io/blog/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://d0m1987.github.io/blog/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://d0m1987.github.io/blog/tags/tools/","section":"tags","tags":null,"title":"tools"},{"body":"VS Code - Custom window title You know for sure the window title in VS Code, i.e. the text at the very top of your VS Code window.\nBut did you know that (like most in VS Code) you can modify it such that it suits your working style best?\nJust go to the .json settings (MacOS Shortcut: Cmd + ;) and add the key-value-pair \u0026quot;window.title\u0026quot;: \u0026quot;\u0026lt;your prefered title\u0026gt;\u0026quot;\nThis is the default setting...\n1\u0026#34;window.title\u0026#34; : \u0026#34;${activeEditorShort}${separator}${rootName}\u0026#34; ... and how the default setting looks like:     This is my setting...\n1\u0026#34;window.title\u0026#34; : \u0026#34;${activeEditorLong}\u0026#34; ... and how my setting looks like:     With this setting, I see the whole absolute filepath. This helps me to distinguish more easily in which project I am in comparison to the default value.\nFor a complete list of variables you can use in the setting, please see here.\nTip If you like emojis as much as I do: you can also add emojis to the window title ü§Ø      ","link":"https://d0m1987.github.io/blog/post/60_second_gists/vscode_window_title/","section":"post","tags":["vs-code"],"title":"Custom window title text in VS Code"},{"body":"","link":"https://d0m1987.github.io/blog/tags/vs-code/","section":"tags","tags":null,"title":"vs-code"},{"body":"Hello dear visitor and welcome to my little blog! üëã\nMy name is Domi and since I can remember, I was fascinated by technical stuff. As so many, I started of with playing Nintendo, moved on to the computer and was soon building them on my own. During university, I felt in love with programming and got in touch with C, Java and finally Python, my go-to language until today.\nHaving worked as an IT business consultant over the last couple of years, I noticed that I'd like to integrate programming more into my daily job. Thus, I'm planning to level up my knowledge, built a portfolio and see what will happen ¬Ø\\_(„ÉÑ)_/¬Ø\nIn this blog, you will find ...\n ... know-how that I find interesting to share ... tools that I'm using, e.g. to manage the knowledge I'm gathering or to code ... tips \u0026amp; tricks for your everyday life üòâ  Enjoy your stay on the site,\nDomi\n","link":"https://d0m1987.github.io/blog/about_me/","section":"","tags":null,"title":"About Me"},{"body":" Warning This post is in active development and constantly changing.\n Why this article? I was researching which static site generator (SSG) to use when I'm starting my blog. There were a lot of possibilities, e.g. Jekyll that is directly promoted through Github.\nNevertheless, I chose Hugo. Some of the reasons for Hugo were...\n It's build on Go and this is a programming language I want to learn during this year. So I hope that this will be a good match ü§û I found the theme Clarity (credits to Chip Zoller. Great work! üëç) and instantly fell in love with it. I like the features, I like the layout and best: it's actively maintained. The start reminded me of World of Warcraft: easy to start (\u0026lt; 5 minutes) and get something up and running. But nevertheless, the further you progress, your possibilities seem to be huge!  After my start with Hugo, I was a bit struggling to find proper / the best resources to start of. Especially, if you are into modifying the templates yourself. So here you can find an ongoing article where I'll add my resources that I use to learn Hugo.\nLinks  Hugo Github Repository Hugo Website Hugo Documentation Youtube Playlist: How Hugo as a SSG works Youtube: Setup homepage with theme explained  ","link":"https://d0m1987.github.io/blog/post/github_pages_and_hugo/","section":"post","tags":["hugo","github-pages"],"title":"Github Pages and Hugo üìù"},{"body":"","link":"https://d0m1987.github.io/blog/tags/github-pages/","section":"tags","tags":null,"title":"github-pages"},{"body":"","link":"https://d0m1987.github.io/blog/tags/hugo/","section":"tags","tags":null,"title":"hugo"},{"body":"","link":"https://d0m1987.github.io/blog/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"If you're having problems understanding (nested) python list comprehensions like I had at the beginning, don't worry anymore! The following explanation really helped me to understand how comprehensions and for-loops are linked.\nJust make yourself aware that the following for-loop ...\n1items_level_1 = [1,2,3] 2for item_level_1 in items_level_1: 3print(item_level_1) ... is equivalent to this list comprehension\n1[print(item_level_1) for item_level_1 in items_level_1] So the main thing that changes is that print(item_level_1) is standing in the beginning instead of being at the end of the for-loop.\nIf you are having a nested for-loop like the following...\n1items_level_2 = [[1,2,3],[4,5,6]] 2for items_level_1 in items_level_2: 3for item_level_1 in items_level_1: 4print(item_level_1) ... you can still transform it into a (hard to read) list comprehension\n1[print(item_level_1) for items_level_1 in items_level_2 for item_level_1 in items_level_1]  Tip When you read the list comprehension from left to right, it's like reading the nested for-loop from top to bottom.\n Warning Please keep the Zen of Python in mind:\n Flat is better than nested.\nReadability counts.\n It's rare that a nested list comprehension is better than two easy to read for loops üòâ\n I hope that this helps you understand list comprehensions a bit more in the future. Read you soon üëã\n","link":"https://d0m1987.github.io/blog/post/60_second_gists/python_unwrangling_list_comprehensions/","section":"post","tags":["python"],"title":"Unwrangling list comprehensions ü§ì‚òùÔ∏è"},{"body":"","link":"https://d0m1987.github.io/blog/categories/","section":"categories","tags":null,"title":"Categories"}]