[{"body":"","link":"https://d0m1987.github.io/blog/","section":"","tags":null,"title":""},{"body":"","link":"https://d0m1987.github.io/blog/series/60-second-gists/","section":"series","tags":null,"title":"60 second gists"},{"body":"","link":"https://d0m1987.github.io/blog/post/60_second_gists/","section":"post","tags":null,"title":"60 second gists"},{"body":"","link":"https://d0m1987.github.io/blog/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://d0m1987.github.io/blog/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"","link":"https://d0m1987.github.io/blog/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://d0m1987.github.io/blog/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"If you're having problems understanding (nested) python list comprehensions like I had at the beginning, don't worry anymore! The following explanation really helped me to understand how comprehensions and for-loops are linked.\nJust make yourself aware that the following for-loop ...\n1items_level_1 = [1,2,3] 2for item_level_1 in items_level_1: 3print(item_level_1) ... is equivalent to this list comprehension\n1[print(item_level_1) for item_level_1 in items_level_1] So the main thing that changes is that print(item_level_1) is standing in the beginning instead of being at the end of the for-loop.\nIf you are having a nested for-loop like the following...\n1items_level_2 = [[1,2,3],[4,5,6]] 2for items_level_1 in items_level_2: 3for item_level_1 in items_level_1: 4print(item_level_1) ... you can still transform it into a (hard to read) list comprehension\n1[print(item_level_1) for items_level_1 in items_level_2 for item_level_1 in items_level_1]  Tip When you read the list comprehension from left to right, it's like reading the nested for-loop from top to bottom.\n Warning Please keep the Zen of Python in mind:\n Flat is better than nested.\nReadability counts.\n It's rare that a nested list comprehension is better than two easy to read for loops üòâ\n I hope that this helps you understand list comprehensions a bit more in the future. Read you soon üëã\n","link":"https://d0m1987.github.io/blog/post/60_second_gists/python_unwrangling_list_comprehensions/","section":"post","tags":["python"],"title":"Unwrangling list comprehensions ü§ì‚òùÔ∏è"},{"body":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","link":"https://d0m1987.github.io/blog/about_me/","section":"","tags":null,"title":"About"},{"body":"","link":"https://d0m1987.github.io/blog/categories/","section":"categories","tags":null,"title":"Categories"}]